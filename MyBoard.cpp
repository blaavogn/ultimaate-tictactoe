static const unsigned int hash_pl[]  = {
  0x0cf46381, 0x03a1a0ac, 0x0958f091, 0x54aa234a, 0x6d9996cb, 0x0eaf1055, 0x99369982, 0x73a4a478, 0x367a4a1e,
  0x17aa8d1c, 0x0f3882ca, 0xb3ed1eff, 0x0147e7d6, 0xb710a367, 0x00e789c2, 0xc741cbe0, 0x7446ee5a, 0x02e55e17,
  0x27660328, 0xd27b91c1, 0x8616a359, 0x1aadf450, 0x82f6e6f7, 0x5749ef23, 0x0724b544, 0x57b3be3d, 0x74ed5ef6,
  0x66951fb0, 0x9a86d510, 0x1710a63d, 0x4509f005, 0xff67f98e, 0x55d2bf24, 0xff38c438, 0x3c298b70, 0x30c710fa,
  0xe8a85354, 0x6dcf3611, 0xf6e97952, 0xaba94a5b, 0xe3222834, 0x756a681d, 0x68734316, 0x537a2966, 0x712c33b1,
  0x4e9dc7e4, 0x18b36e0f, 0x8ae3ca1f, 0xde7eea20, 0x67e95db0, 0xb2a23dbd, 0x8dbef3ff, 0x7d4fa920, 0xbe722bae,
  0x769a8097, 0x48578a2a, 0xe5c44626, 0x223dfdac, 0x56daa95c, 0xce6d28c9, 0x6301b4ae, 0xc9d095a4, 0x5f99e839,
  0x628bdda6, 0x2508ce86, 0xfaa3d54c, 0x049706fa, 0x3dcd8a50, 0x42976a9b, 0x41ddd112, 0x04ec1556, 0x5b514970,
  0x085d5307, 0x30d55b6e, 0x6de44b61, 0x08c1134d, 0x3702dc1d, 0xc0687041, 0x208917a9, 0xff923d59, 0x8633ce7a
};

static const unsigned int hash_op[] = {
  0x5fee823a, 0x5be275ff, 0x99e1a906, 0x26b329c1, 0x617cd4dc, 0x3cd28f99, 0xa9279999, 0x10f12706, 0x5f9a2b0a,
  0x4d0a8a9c, 0xe678c398, 0xa22d3e98, 0x73584e95, 0x42956534, 0xf9451656, 0xc9e8ce12, 0xf6df3182, 0x3a20d634,
  0x351591a3, 0xc11834cc, 0x70152ff8, 0x23690370, 0x8c79689f, 0xcb69826b, 0xcf3ffb2e, 0x6311aa61, 0xe043bd6a,
  0x269553c6, 0x0c570cbb, 0xefaa394e, 0xb9af25b0, 0x426d9218, 0x0500f488, 0xc4efac9e, 0x3cb3b1fd, 0xb9983c66,
  0x8981e1d7, 0xd7e60c52, 0x6fb1491b, 0xb4dc7634, 0x37988b05, 0x628e814b, 0x1a7a11fa, 0xf010ff07, 0x8daee823,
  0xb558e77c, 0x329237bf, 0xc8801d15, 0x85c3aff3, 0xdcb66651, 0x1605d283, 0x9c14b8d1, 0x1af20bad, 0x090fed69,
  0x8fcf70da, 0xda883898, 0x12f2e32a, 0xda1829bd, 0x972f3159, 0xc168ac19, 0x3fdb34ac, 0xdccf7970, 0xb8fdd99f,
  0xf13e82e5, 0x740007f1, 0x66656207, 0x08fd8dea, 0x8f5f5e8b, 0x5fca050c, 0xd09d030d, 0xd75e895d, 0x6037982b,
  0xcf844ec0, 0x39d8cfdc, 0x99b5f142, 0xb5d328f5, 0x2ee0c247, 0x4f5a254c, 0xe1e1dd47, 0x9d47db69, 0xdcdc07a0
};

class MyBoard{
	public: 
		char* board;
	  char move;
		char depth;
		unsigned int hash;
	
	MyBoard(){
		move = 0;
		depth = 0;
		hash = 0;
	}

	~MyBoard(){
		delete(board);
	}  
};

struct MyEqual {
	bool operator()( MyBoard* const &l,MyBoard* const &r) const {
		if(l->move != r->move){
			return false;
		}
		if(l->depth != r->depth){
			return false;
		}
	  for(int i = 0; i < 81; i++){
	  	if(l->board[i] != r->board[i])
	  		return false;
	  }
	  return true;
	}
};


struct MyHash
{
    std::size_t operator()(MyBoard* const& s) const 
    {	
    	return s->hash;
    }
};
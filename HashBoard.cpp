#pragma once

#include <cstddef>
#include <stdint.h>

static const uint64_t hash_pl[]  = {
0x7822a026bf7c8929, 0x8c0d988b1db555e2, 0x60fbe97a41e1f290, 0x61a38a1500879cea, 0x839381170b0dfbbc, 0x678388f7282204e0, 0xcc7fe8bb0c0682fc, 0x17cfbdc189f913e6, 
0x08a729c8c674b96f, 0x52766b63c16d30c1, 0xbbf04330e8ee730e, 0x0cc09d2fd7fab53d, 0xc25d3ba770c25678, 0xe402bd2b675b8b5a, 0x442ff2436fe064c8, 0x78380ec9bcf4ba2f, 
0x468db6047927fcb5, 0xe29e60ea35ad7760, 0x3a22826f4f92d6f0, 0x3a8fc54c6c86ddfe, 0xd5202a4fa1314695, 0x3821610b3cda1ba6, 0x895986838cc10311, 0x3de95e7aed4affe6, 
0x14b5c1f9b54cb77b, 0xc08ecb0014205b81, 0xcd48d905a955b510, 0x8ad51c9f4e830269, 0x301082162370be68, 0x903cf6471a97be65, 0x968ff6594a1e046e, 0x35a24e17dab2cfab, 
0x6040a0a5f17b6c00, 0x3675394a51fa5ef4, 0xc6343ed963d4b1a4, 0x4edb5304be45d134, 0xe214a5b5d5c25063, 0xc504d1520ea8e9cc, 0x6ccc8013b38d487c, 0x83e9c23c729b6f08, 
0xb6693f52438cac6e, 0xd2915fba39f27a4c, 0xaae5f196c0364192, 0x0a268125a177e903, 0x78fa66ea47ebbb11, 0x76bca3617547bd9a, 0x88e5c55360d680b1, 0x95c3c53172748a21, 
0x6b6385a9c1a41ebf, 0x5c82d600a6dca899, 0xe9758287158fa7cb, 0x2aad86f720296e82, 0x842859e092b02af4, 0x9b84ea8271fc36df, 0xcf712c00afc9132e, 0x2bc1b986831a0473, 
0xb8629c784df92692, 0x90bbff3af1dc7f19, 0x551eb00c261fb1bf, 0xcadf6c2c0035741c, 0xdf88166df596955e, 0xe1e1ea936c6d0479, 0x387af760d675531b, 0x7fc2213ab1f0e1b8, 
0x1f356ae1b68dfaac, 0xb009d935aaad3d41, 0xe9311c14d890ac20, 0xfd6189ee4e89182f, 0x89de820076b4f945, 0xc3c5b9988cc93df3, 0xfd2cf7b0d446b88a, 0x60ac7b3353ebf656, 
0xfa8a4bc8c9a07bc2, 0x17b9840cec7907d9, 0x613816c9aa644b96, 0x3a3a153f86da11de, 0x264313d135292f3d, 0x23cd3856f8185838, 0x869f868ffc6ce8ef, 0xad027fb3d020205b, 
0x8383f21941b8a283, 0xcfd76a8995021f43, 0xa70092d39d3355cc, 0xec95fdfd93433e14, 0xdaea12712c164b2e, 0x9554df102f3fc31a, 0x6353229a83670ab5, 0x7d6b6c4902efcdfd, 
0xcbd269ca46cca9c7, 0xcc42a2dcebb25992, 0x64f38699d1b61566, 0xa04dcc6ab34192f2, 0xd48b432a0de23f12, 0x4ab1d28aec393093, 0xd4c35176d64149a4, 0x3b369ec2b6199629, 
0x3965bef69d0268a2, 0x90e99c165975d210, 0x3b1207c4dcf24425, 0x9e23fb3c9e882075, 0x69ae25de2408a9e5, 0xd0fa598da783b61f, 0x6e145f64792d72fa, 0xebbb3ec2d39630b8, 
0x64f3b66dc2a7440e, 0xacb855a036ca8f53, 0x16918fa995d2cfab, 0x229fba99f9fa824f, 0x90c0c488fa984b3d, 0x146b475fde0498b7, 0x927e44d5c204b994, 0x8d98eb36a3e4503f,
0x0a2cbf3d8002f32a, 0xad87e9b55214f9f8, 0xa3e74f5ea583b98a, 0x61a813f9f31aa8b4, 0xb065c6f1dce7b302, 0x1f66371b57b15cd0, 0xf81227220f6cf51b, 0x01f7d3f1b02a19c8,
0x82b7b2ac23f6273b, 0x3d1a291909924fbb, 0x06123100d5fea7b4, 0x02cda21d0905677a, 0x673a1d51b5eebe85, 0xe4b4b54c07c675bb, 0xe4f3bd59133ce165, 0x8ff01e998c424a7e, 
0xc3934ab5ab7bd23f, 0x9f6a60f163d7dbaf, 0x274be1f62c157a93, 0x3be905c37df05880, 0x44b0207f5cb5446f, 0x901d7266d8e718b1, 0x5660a622762a7c1e, 0xa7d95b2f3e8af0bc, 
0xf6b0b5de432c1ec2, 0xd3e30d544cea26b4, 0xfb0a851726909c85, 0x820f21b7df59381c, 0xd41027a7a1fac314, 0x8ead0fba6d9c344e, 0xef55a6d20bc71680, 0xcc480f142f4dc552, 
0x276a640d95f82b61, 0x1ead4504eb23d2f0, 0x5378777d9790ece1, 0x77c281d7745c4660, 0x6c1f65290a274f2c, 0x30c3a21ac23f55ab, 0x67bb3ccd9662e401, 0xc7abdce6d2c1ab74, 
0x36c5732cbb456ec3, 0x5b0a634b314a3675, 0xb75dcc50161d6a81, 0x27e3ea24e38acc70, 0x70b1b0ef8d4bfce0, 0xc6beab5fb5fb54ed, 0x10187d14f4271b4f, 0x84949d5c5a78c8d8, 
0xbe54ade2bb9a42ca
};
   
static const uint64_t hash_op[] = {0x0b9b2d6a6251703e, 
0x7f65e39a2d3b2910, 0xcd706c23959995f5, 0x5c9cf5aeb81cd2ca, 0xefb16d4292d460ac, 0xa4142225de6a75bb, 0x05ca39e567913122, 0xbf7fcda9288cb452, 0x79204241a04c937c, 
0xd9eee8d94a2eeea0, 0xa044207af1f3c6f3, 0xba082b269c1e731a, 0xfbe6f7f80e05d6b7, 0xb37c28611431874b, 0x2cd8dedecb4470ee, 0x729bce2c9085a5df, 0xae6ef8c45db243e1, 
0x18d335248681e371, 0x176aa428d8f8003d, 0x7c89b33740eb153b, 0x632ee84b6fee8e43, 0x7d5f037032a9f13c, 0x2ce59b596f3ff202, 0x9b1f1e0afe7e921a, 0x24c37e2273475022, 
0xad01f53360d90119, 0x6214bd0b39410e11, 0x20c8994e0054dd37, 0x39c252a0d88e17ae, 0xc958aa62d96163ea, 0x0f37f1ca69949f69, 0xc84b0319a1c8c28a, 0xece13312ee7548d6, 
0xb7a1cf4a0eb9a71b, 0x61302511ce169e0e, 0xca61283be0b1b5a8, 0x7df5486d40fbcefe, 0x3114b0035a958b0a, 0xcf78973be6b14cc1, 0x65068d33213ae549, 0xa738275ab26284df, 
0x142e6a5716aa48ad, 0x06ac29eeca1a134b, 0xd2a87c856569eb16, 0x54b4be8457dd6f9c, 0xe2e9dcc4eca56ae9, 0xc90eae65ff329dac, 0x0843278e2bb20df4, 0x66ea470978e42162, 
0xebb87dc6ca430921, 0x09d9e8363aebb6c3, 0xeee5357bdfd7bb53, 0x65b6f193babce067, 0x5d7e45821e151b97, 0x7fe3328d775e9f2e, 0x4340a605931c520e, 0xd5d3a186c21b1297, 
0xebc394e93b6a127d, 0x84613d895cb3e8d6, 0x3020225993953a28, 0x00015171b94099c5, 0x873a14ddb4de18bb, 0x735b8ebb31b28002, 0x3c78ad72f9a695ee, 0x811d946bc891134a, 
0x7663ee7cb0d75400, 0x48621fc78dbe7748, 0x0ccf46c9e0538d77, 0x63eb58a69615022f, 0x77e990fa9d600c83, 0x82b9c8f5aaa330d3, 0xbfd4d77a09527a2f, 0x208642b9ac71a2bc, 
0x7fb1265335341bdc, 0x5ab3935e726d0b40, 0xf0b2ebd0154d5433, 0xa2ef74efb182b144, 0x9377d5fcae846893, 0xe4d02b07594c2cf8, 0xeb86d1698bb964a2, 0xc84d56eb0b04a19e, 
0x83995109356b4ce4, 0x2c3ad9ae335a48de, 0x8f50c4c17195a72d, 0x4f436e4af514b6ce, 0x4c850bc4b8440bc7, 0x7d0593148dfe8f21, 0x1d9a05e858f9b761, 0xf820198e0329019c, 
0x61988c2a6f6c8c55, 0x22700c9e6e2e9165, 0x4a2a4c0c84aa4467, 0xa173bef74950b95c, 0xf4f16e188f5f6052, 0x146479b4c2051c00, 0xe7c4d46910e8e6ce, 0xbf6679df634835b3, 
0x56643aec7bc836d5, 0x84f5c9cdefee7213, 0xb918025f052359c8, 0x15d647620976f318, 0xca01e1c3598a8903, 0xb3ed93ebed24acbd, 0xd77c4b2e106f245e, 0x010553ec99e363c5,
0x7ef7a4e4c0d93e8d, 0xe438ad94cd92f0de, 0x4e2bff400eb21d14, 0xc0c98c050345c194, 0xa88346ac8d455192, 0xf40c1117c59c119f, 0x8211ab82c50a887b, 0x6ddffea0e5227f81, 
0xed45f3dc92f00aa8, 0xc416447fed44fc11, 0x6be7d0f9384a9871, 0x78c882148d539a15, 0xc3cc5ec296a2a57d, 0x447dd7e47956574f, 0xff6797edaa9605b0, 0xf5a0d73f46144bd3, 
0x129db122238530ca, 0x0e2b2a4b9590f00e, 0x0d77874a1926f400, 0xddbaa6111cd5775f, 0x43ec0c86833452d8, 0xd30969fb37ec5bf2, 0x95cb9fdfe6b46402, 0x03ba0de7e6337301, 
0xa5b9ff9280c476a2, 0x494eb8394be2aaa2, 0x215af97f4baed93f, 0x9d0ed8e50249aca4, 0x76ccd9aca2c8d535, 0x744e341257ffd4b8, 0xcf4a70ff88149f0d, 0xc80f9675f406f70d, 
0xef5ad8d1401e0b53, 0xf300a82532f1feaf, 0xac70c80d4ea20d29, 0xd9266f0b6fce9bcc, 0x02bed3a7ca93ca86, 0x69c31ff6d618265e, 0x65787d42c20bf809, 0x278164ed094b0d46, 
0x064d748199a03ac6, 0xfc2adc7c8fe39165, 0x331c123aa3a7c7a0, 0xbda6c82f0566a751, 0xaadbef20d1881fa6, 0x9de65f3bcc6a6ace, 0x3c5430fa18e44a28, 0x78c9bd6a190a45b8
};

static const uint64_t hash_move[] {
	0xdf76bfc7418b9f30, 0x374a86e996c93231, 0x39581ae81ec33284, 0xd18fbf900587667f, 0xcbdeae0414457a4d, 0x4a25c8e63f8683d2, 0xf9f3f8bf89de56c0, 0x3531ee949cffef68, 
0xf394d22f90a4d73d
};

class HashBoard{
	public: 
		char valDepth;
		char movesMade;
		char shallow;
		char bestMove;
		float eval;
	
	HashBoard(){
		valDepth = 0;
		movesMade = 0;
		shallow = 0;
		bestMove = 0;
		eval = 0.0;
	}

	~HashBoard(){
	}  
};

class HashKey{
	public: 
	  char prevMove;
		char *board;
		uint64_t hash;
	
	HashKey(){
	}

	~HashKey(){
	}  
};

struct HashKeyEqual {
	bool operator()( HashKey* const &l, HashKey* const &r) const {
	  return (l->hash == r->hash);
	}
};

struct HashKeyHash
{
    std::size_t operator()(HashKey* const& s) const 
    {	
    	return s->hash;
    }
};